<!DOCTYPE HTML>
<html>

<head>
  <title>chirag nagpal</title>
  <meta name="description" content="website description" />
  <meta name="keywords" content="website keywords, website keywords" />
  <meta http-equiv="content-type" content="text/html; charset=windows-1252" />
  <link rel="stylesheet" type="text/css" href="style/style.css" />
</head>

<body>
  <div id="main">
    <div id="header">
      <div id="logo">
        <!-- class="logo_colour", allows you to change the colour of the text -->
        <h1><a href="index.html">chirag<span class="logo_colour"> ~nagpal</span></a></h1>
        <h2>A Computer Engineer..<br> ..Finding His Way Through Circuits</h2>
      </div>
      <div id="menubar">
        <ul id="menu">
          <!-- put class="selected" in the li tag for the selected page - to highlight which page you're on -->
          <li ><a href="index.html">Home</a></li>
          <li><a href="projects.html"> Projects</a></li>
	  <li class="selected"><a href="examples.html">BeagleBone</a></li>
        </ul>
      </div>
    </div>
    <div id="site_content">
      <div class="sidebar">
        <h1>BeagleBone</h1>
        <h4>The BBB GPIO, Simplified</h4>
        <h5>December 3rd, 2013</h5>
        <p>A beginners guide to the Beagle Bone Black GPIO.<br /><a href="examples.html">Read more</a></p>
      </div>
      <div id="content">
        <h1>BeagleBone Black GPIO through /dev/mem</h1>
<hr>	
<br>
<p>One of my projects involved interfacing the BeagleBone Black to an Quadrarture Encoder. Before beginning with it, I thought the task would be simple and easy, I would use adafruit PyBBIO library to do it. However, I soon realised that PyBBIO is just a Python wrapper of the /sysfs interface! I wrote a script that uses /sysfs and toggles P9_12, and I then probed the pin on my oscilloscope. To my horror this is what I found:<br><center><img src="graph.bmp" height="360px"></center> </p>
 <br>
Upon googling a bit, I stumbled upon <a href="https://groups.google.com/forum/#!msg/beagleboard/nEyqaMqboE8/qwoYvG9wcXIJ">this</a> and then, <a href="http://stackoverflow.com/questions/13124271/driving-beaglebone-gpio-through-dev-mem">this</a>. The code was for BeagleBone White, but I decided to try it out on the Black too see if it works.
And yes, it did, I could clearly see USR1_LED blink while running the code. 
<p>This meant that the address range for the GPIO registers had not changed from the Vanilla BeagleBone to the BeagleBone Black. I then decided to use the same code to toggle one of the GPIO pins. I decided upon P9_12, thats at offset 28 in the GPIO0 register bank(same as the leds). Ofcourse, on simply modifying the code, I did not get any result. I had to MUX the pin, by using a custom device tree overlay. It is then that I referred to this excellent <a href="http://derekmolloy.ie/gpios-on-the-beaglebone-black-using-device-tree-overlays/"> tutorial</a>. </p>
<p>After performing the steps mentioned above, I again tried to run the code to toggle P9_12. No Luck. </P>
<p>I figured that I first needed to export the pin, set the pin direction, and its initial value, while this could too be done using /dev/mem, however to simplify things I decided to go ahead with the sysfs method to export the pin and set its direction.

<p>After that, I again tried to run the code that uses /dev/mem. VOILA! It finally worked. On probing with the oscilloscope this is what I got:<br><center><img src="graph2.bmp" height="360px"></center><br>

A toggle rate of 2.78 MHz! thats nearly 1000 times what I got earlier!
Though one would expect a much higher toggle rate from a 1GHz processor, however 2Mhz+ was sufficient for my application! 

I plan to create my own library to use the mmap soon, do email me incase you found this to be useful, or incase you need some more assistance, I'll be glad to help! 
</div>

    </div>
<br>
<div id="logo">  
<h2>chiragnagpal94@hotmail.com</h2>

</div>  
</div>
</body>
</html>
